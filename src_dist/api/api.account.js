let path=require("path"),fs=require("fs"),UserModel=require("../model/user").UserModel,setToken=require("../util/token").setToken,dataEncrypt=require("../util/crpyto").dataEncrypt,ResponseModel=require("../model/response").ResponseModel,dateParser=require("../util/dateParse").dateParser,{PassWordEncrypt,PassWordCompare}=require("../util/bcrypt"),checkDuplicate=require("../util/checkDuplicate").checkDuplicate;async function Login(e,n){try{var r,o,a,s=await UserModel.findOne({id:e});return s?await PassWordCompare(n,s.pw)?(r=setToken(e),o=setToken(e,!0),a=JSON.stringify({a:r,r:o}),new ResponseModel(200,dataEncrypt(a))):new ResponseModel(403,null,"비밀번호를 확인 해주세요."):new ResponseModel(403,null,"가입되지않는 계정입니다.")}catch(e){return new ResponseModel(500,e,"알수 없는 에러")}}async function IdCheck(e){try{if(e)return await UserModel.findOne({id:e})?new ResponseModel(403,null,"이미 가입된 아이디 입니다."):new ResponseModel(200,null,"");throw"아이디 값이 없습니다."}catch(e){throw new ResponseModel(500,e,"idSearch api 알수 없는 에러")}}async function IdSearch(e,n){try{var r,o=await UserModel.findOne({name:e,"phone.value":n});return o?(r={id:o.id,createDate:dateParser(o.createRegister)},new ResponseModel(200,r,"")):new ResponseModel(403,null,"조회된 정보가 없습니다.")}catch(e){throw new ResponseModel(500,e,"idSearch api 알수 없는 에러")}}async function EmailCheck(e){try{return await UserModel.findOne(e)?new ResponseModel(403,null,"가입된 이메일 입니다."):new ResponseModel(200,null,"")}catch(e){throw new ResponseModel(500,e,"emailCheck api 알수 없는 에러")}}async function PhoneCheck(e,n){try{return await UserModel.findOne({"phone.value":e,"phone.agency":n})?new ResponseModel(403,null,"가입된 폰번호 입니다."):new ResponseModel(200,null,"")}catch(e){throw new ResponseModel(500,e,"emailCheck api 알수 없는 에러")}}async function Register(e){try{var o=await checkDuplicate(e);if(o)return new ResponseModel(403,null,`이미 가입된 ${o} 입니다.`);var a=new UserModel({...e,nickName:e.name,pw:PassWordEncrypt(e.pw),phone:{value:e.phone,agency:e.phoneAgency}});let n=a.id,r=path.join(__dirname,"..","..","/"+process.env.FILE_DIRECTORY_NAME);return fs.mkdir(path.join(""+r,n),e=>{if(e)return console.log("folder create Error",e);fs.mkdir(path.join(r+"/"+n,"profile"),e=>{if(e)return console.log("user profile folder create error",e)}),fs.mkdir(path.join(r+"/"+n,"file"),e=>{if(e)return console.log("user file folder create error",e)})}),a.save(),new ResponseModel(200,null,"")}catch(e){throw new ResponseModel(500,e.message,"register api 알수 없는 에러")}}async function PwSearch(e){try{var{id:n,name:r,phone:o}=e;return await UserModel.findOne({id:n,name:r,"phone.value":o})?new ResponseModel(200,null,""):new ResponseModel(403,null,"일치하는 정보가 없습니다.")}catch(e){throw new ResponseModel(500,e,"PwSearch api 알수 없는 에러")}}async function PwChange(e){try{var{id:n,newPw:r,name:o,phone:a}=e,s=await UserModel.findOne({id:n,name:o,"phone.value":a});return s?await PassWordCompare(r,s.pw)?new ResponseModel(403,null,"기존의 비밀번호와 다른 비밀번호로 변경해주세요."):(s.pw=PassWordEncrypt(r),s.save(),new ResponseModel(200,null,"")):new ResponseModel(403,null,"일치하는 정보가 없습니다.")}catch(e){throw new ResponseModel(500,e.message,"PwChange api 알수 없는 에러")}}async function Withdrawal(e){try{var n,r,o;return await UserModel.findOne({id:e})?(n=path.join(__dirname,"..","..","/"+process.env.FILE_DIRECTORY_NAME),r=path.join(n,e),0===(o=await UserModel.deleteOne({id:e})).deletedCount?new ResponseModel(403,o,"회원탈퇴에 실패 했습니다. 잠시후 다시 시도 해주세요."):(fs.existsSync(r)&&fs.rmSync(r,{recursive:!0,force:!0}),new ResponseModel(200,null,""))):new ResponseModel(403,null,"일치하는 정보가 없습니다.")}catch(e){throw new ResponseModel(500,e.message,"Withdrawal api 알수 없는 에러")}}module.exports={Login:Login,IdCheck:IdCheck,IdSearch:IdSearch,EmailCheck:EmailCheck,PhoneCheck:PhoneCheck,Register:Register,PwSearch:PwSearch,PwChange:PwChange,Withdrawal:Withdrawal};// build date : 2025. 5. 21. 오후 7:06:44